<!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
    <id>ch.kleis.lcaplugin</id>
    <name>Life Cycle Analysis as Code</name>
    <vendor url="https://kleis.ch" email="contact@kleis.ch">Kleis</vendor>
    <description>
        <![CDATA[
        Adds support for a new domain-specific language targeting <i>Life Cycle
            Analysis</i> experts. The following features are available for free.
        <ul>
            <li>EF 3.1 flows and characterization factors from the <a
                    href="https://eplca.jrc.ec.europa.eu/LCDN/developerEF.xhtml">European Platform on Life Cycle
                Assessment</a></li>
            <li>Description of processes, intermediary and elementary flows, with parameters.</li>
            <li>Embedded inventory computation engine.</li>
            <li>Code navigation.</li>
            </ul>
    ]]>
    </description>
    <xi:include href="/META-INF/tips-kleis-1.xml"/>

    <extensions defaultExtensionNs="com.intellij">

        <moduleType
                id="LCA_MODULE_TYPE"
                implementationClass="ch.kleis.lcaplugin.project.LcaModuleType"/>

        <applicationService serviceImplementation="ch.kleis.lcaplugin.services.MyApplicationService"/>
        <fileType
                name="LCA Definition File"
                implementationClass="ch.kleis.lcaplugin.LcaFileType"
                fieldName="INSTANCE"
                language="LCA"
                extensions="lca"/>
        <lang.parserDefinition
                language="LCA"
                implementationClass="ch.kleis.lcaplugin.language.parser.LcaParserDefinition"/>


        <lang.commenter
                language="LCA"
                implementationClass="ch.kleis.lcaplugin.language.LcaCommenter"/>

        <lang.foldingBuilder
                language="LCA"
                implementationClass="ch.kleis.lcaplugin.language.ide.syntax.LcaFoldingBuilder"/>
        <lang.braceMatcher language="LCA"
                           implementationClass="ch.kleis.lcaplugin.language.ide.syntax.LcaBraceMatcher"/>
        <lang.formatter
                language="LCA"
                implementationClass="ch.kleis.lcaplugin.language.ide.style.LcaFormattingModelBuilder"/>
        <lang.syntaxHighlighterFactory
                language="LCA"
                implementationClass="ch.kleis.lcaplugin.language.ide.syntax.LcaSyntaxHighlighterFactory"/>
        <lang.documentationProvider
                language="LCA"
                implementationClass="ch.kleis.lcaplugin.language.ide.insight.LcaDocumentationProvider"/>

        <annotator
                language="LCA"
                implementationClass="ch.kleis.lcaplugin.language.ide.insight.LcaTechnoInputExchangeAnnotator"/>
        <annotator
                language="LCA"
                implementationClass="ch.kleis.lcaplugin.language.ide.insight.LcaFromProcessRefAnnotator"/>
        <annotator
                language="LCA"
                implementationClass="ch.kleis.lcaplugin.language.ide.insight.LcaBioExchangeAnnotator"/>
        <annotator
                language="LCA"
                implementationClass="ch.kleis.lcaplugin.language.ide.insight.LcaQuantityAnnotator"/>
        <annotator
                language="LCA"
                implementationClass="ch.kleis.lcaplugin.language.ide.insight.LcaUnitAnnotator"/>

        <lang.elementManipulator forClass="ch.kleis.lcaplugin.language.psi.type.ref.PsiQuantityRef"
                                 implementationClass="ch.kleis.lcaplugin.language.psi.manipulators.PsiQuantityRefManipulator"/>
        <lang.elementManipulator forClass="ch.kleis.lcaplugin.language.psi.type.ref.PsiProductRef"
                                 implementationClass="ch.kleis.lcaplugin.language.psi.manipulators.PsiProductRefManipulator"/>
        <lang.elementManipulator forClass="ch.kleis.lcaplugin.language.psi.type.ref.PsiProcessTemplateRef"
                                 implementationClass="ch.kleis.lcaplugin.language.psi.manipulators.PsiProcessTemplateRefManipulator"/>
        <lang.elementManipulator forClass="ch.kleis.lcaplugin.language.psi.type.spec.PsiSubstanceSpec"
                                 implementationClass="ch.kleis.lcaplugin.language.psi.manipulators.PsiSubstanceSpecManipulator"/>
        <lang.elementManipulator forClass="ch.kleis.lcaplugin.language.psi.type.exchange.PsiTechnoProductExchange"
                                 implementationClass="ch.kleis.lcaplugin.language.psi.manipulators.PsiTechnoProductExchangeManipulator"/>
        <lang.elementManipulator forClass="ch.kleis.lcaplugin.language.psi.type.PsiGlobalAssignment"
                                 implementationClass="ch.kleis.lcaplugin.language.psi.manipulators.PsiGlobalAssignmentManipulator"/>
        <lang.elementManipulator forClass="ch.kleis.lcaplugin.language.psi.type.PsiAssignment"
                                 implementationClass="ch.kleis.lcaplugin.language.psi.manipulators.PsiAssignmentManipulator"/>
        <lang.elementManipulator forClass="ch.kleis.lcaplugin.language.psi.type.ref.PsiUnitRef"
                                 implementationClass="ch.kleis.lcaplugin.language.psi.manipulators.PsiUnitRefManipulator"/>
        <lang.elementManipulator forClass="ch.kleis.lcaplugin.language.psi.type.ref.PsiParameterRef"
                                 implementationClass="ch.kleis.lcaplugin.language.psi.manipulators.PsiParameterRefManipulator"/>
        <lang.findUsagesProvider language="LCA"
                                 implementationClass="ch.kleis.lcaplugin.language.ide.find_usage.LcaFindUsagesProvider"/>


        <additionalLibraryRootsProvider
                implementation="ch.kleis.lcaplugin.project.LcaRootLibraryProvider"/>

        <stubIndex implementation="ch.kleis.lcaplugin.language.psi.stub.substance.SubstanceKeyIndex"/>
        <stubIndex
                implementation="ch.kleis.lcaplugin.language.psi.stub.techno_product_exchange.TechnoProductExchangeKeyIndex"/>
        <stubIndex implementation="ch.kleis.lcaplugin.language.psi.stub.process.ProcessStubKeyIndex"/>
        <stubIndex implementation="ch.kleis.lcaplugin.language.psi.stub.unit.UnitKeyIndex"/>
        <stubIndex implementation="ch.kleis.lcaplugin.language.psi.stub.global_assignment.GlobalAssigmentStubKeyIndex"/>
        <stubElementTypeHolder class="ch.kleis.lcaplugin.psi.LcaTypes" externalIdPrefix="lca."/>

        <toolWindow id="LCA Output"
                    icon="AllIcons.General.Modified"
                    anchor="bottom"
                    factoryClass="ch.kleis.lcaplugin.ui.toolwindow.LcaOutputToolWindowFactory"
                    canCloseContents="true"/>

        <runLineMarkerContributor
                language="LCA"
                implementationClass="ch.kleis.lcaplugin.language.ide.insight.AssessProcessMarkerContributor"/>

        <notificationGroup id="LcaAsCode"
                           displayType="BALLOON"
                           bundle="messages.MyBundle"/>
        <applicationService serviceImplementation="ch.kleis.lcaplugin.ide.imports.LcaImportSettings"/>

        <codeInsight.lineMarkerProvider
                language="LCA"
                implementationClass="ch.kleis.lcaplugin.language.ide.insight.GraphChildProcessesMarkerProvider"/>
    </extensions>

    <applicationListeners>
        <listener class="ch.kleis.lcaplugin.listeners.MyProjectManagerListener"
                  topic="com.intellij.openapi.project.ProjectManagerListener"/>
    </applicationListeners>
    <actions>
        <action id="ImportLibrary" class="ch.kleis.lcaplugin.ide.imports.LcaImportClickAction" text="Import Library">
            <add-to-group group-id="FileMenu" anchor="first"/>
        </action>

    </actions>

</idea-plugin>
