{
  parserClass="ch.kleis.lcaplugin.language.parser.LcaParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Lca"
  psiImplClassSuffix="Impl"
  psiPackage="ch.kleis.lcaplugin.psi"
  psiImplPackage="ch.kleis.lcaplugin.psi.impl"

  elementTypeHolderClass="ch.kleis.lcaplugin.psi.LcaTypes"
  elementTypeClass="ch.kleis.lcaplugin.psi.LcaElementType"
  tokenTypeClass="ch.kleis.lcaplugin.psi.LcaTokenType"

  tokens=[
      PACKAGE_KEYWORD = 'package'
      PROCESS_KEYWORD = 'process'
      SYMBOL_KEYWORD = 'symbol'
      SUBSTANCE_KEYWORD = 'substance'
      COMPARTMENT_KEYWORD = 'compartment'
      SUB_COMPARTMENT_KEYWORD = 'sub-compartment'
      IMPACTS_KEYWORD = 'impacts'
      META_KEYWORD = "meta"
      PRODUCTS_KEYWORD = 'products'
      INDICATOR_KEYWORD = 'indicator'
      VARIABLES_KEYWORD = 'variables'
      UNIT_KEYWORD = 'unit'
      REFERENCE_UNIT_KEYWORD = 'reference-unit'
      SCALE_KEYWORD = 'scale'
      NAME_KEYWORD = 'name'
      DIMENSION_KEYWORD = 'dimension'
      PARAMETERS_KEYWORD = 'parameters'
      INPUTS_KEYWORD = 'inputs'
      EMISSIONS_KEYWORD = 'emissions'
      RESOURCES_KEYWORD = 'resources'
      IMPORT_KEYWORD = 'import'
      IDENTIFIER = 'identifier'
      NUMBER = 'number'
      LSQBRACE = 'left-sqbrace'
      RSQBRACE = 'right-sqbrace'
      LPAREN = 'left-paren'
      RPAREN = 'right-paren'
      LBRACE = 'left-bracket'
      RBRACE = 'right-bracket'
      COMA = 'coma'
      STRING_LITERAL = 'string-literal'
      SPACE = "regexp:\s+"
      COMMENT_BLOCK_START = 'comment-block-start'
      COMMENT_BLOCK_END = 'comment-block-end'
      COMMENT_CONTENT = 'comment-content'
      COMMENT_LINE_START = 'comment-line-start'
      PLUS = "plus"
      MINUS = "MINUS"
      DOT = "dot"
      STAR = "star"
      SLASH = "slash"
      HAT = "hat"
      EQUAL = "equal"
      DOUBLE_QUOTE = "double-quote"
  ]
}

/*
    LCA File
 */

lcaFile ::= package  import* (process | unitLiteral | substance | variables )*

/*
    Package
 */

package ::= PACKAGE_KEYWORD urn {
    implements=["ch.kleis.lcaplugin.language.psi.type.PsiPackage"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.PsiPackageMixin"
}

import ::= IMPORT_KEYWORD urn wildcard? {
    implements=["ch.kleis.lcaplugin.language.psi.type.PsiImport"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.PsiImportMixin"
}

wildcard ::= DOT STAR



/*
    Substance
 */

substance ::= SUBSTANCE_KEYWORD uid LBRACE
    nameField
    compartmentField
    subCompartmentField?
    referenceUnitField
    block_impacts?
    block_meta?
    RBRACE {
    implements=["ch.kleis.lcaplugin.language.psi.type.PsiSubstance"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.PsiSubstanceMixin"
}

compartmentField ::= COMPARTMENT_KEYWORD EQUAL STRING_LITERAL {
    implements=["ch.kleis.lcaplugin.language.psi.type.field.PsiStringLiteralField"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.field.PsiStringLiteralFieldMixin"
}

subCompartmentField ::= SUB_COMPARTMENT_KEYWORD EQUAL STRING_LITERAL {
    implements=["ch.kleis.lcaplugin.language.psi.type.field.PsiStringLiteralField"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.field.PsiStringLiteralFieldMixin"
}

block_meta ::= META_KEYWORD LBRACE (IDENTIFIER EQUAL STRING_LITERAL)* RBRACE {
    implements=["ch.kleis.lcaplugin.language.psi.type.block.PsiBlockMeta"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.block.PsiBlockMetaMixin"
}

/*
    Fields
 */

nameField ::= NAME_KEYWORD EQUAL STRING_LITERAL {
    implements=["ch.kleis.lcaplugin.language.psi.type.field.PsiStringLiteralField"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.field.PsiStringLiteralFieldMixin"
}

dimField ::= DIMENSION_KEYWORD EQUAL STRING_LITERAL {
    implements=["ch.kleis.lcaplugin.language.psi.type.field.PsiStringLiteralField"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.field.PsiStringLiteralFieldMixin"
}

referenceUnitField ::= REFERENCE_UNIT_KEYWORD EQUAL unit {
    implements=["ch.kleis.lcaplugin.language.psi.type.field.PsiUnitField"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.field.PsiUnitFieldMixin"
}

symbolField ::= SYMBOL_KEYWORD EQUAL STRING_LITERAL {
    implements=["ch.kleis.lcaplugin.language.psi.type.field.PsiStringLiteralField"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.field.PsiStringLiteralFieldMixin"
}

scaleField ::= SCALE_KEYWORD EQUAL NUMBER {
    implements=["ch.kleis.lcaplugin.language.psi.type.field.PsiNumberField"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.field.PsiNumberFieldMixin"
}

/*
    Process
 */

process ::= PROCESS_KEYWORD uid?
LBRACE (
    params
    | variables
    | block_products
    | block_inputs
    | block_emissions
    | block_resources
    )* RBRACE {
    implements=["ch.kleis.lcaplugin.language.psi.type.PsiProcess"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.PsiProcessMixin"
}

params ::= PARAMETERS_KEYWORD LBRACE assignment* RBRACE {
    implements=["ch.kleis.lcaplugin.language.psi.type.PsiParameters"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.PsiParametersMixin"
}

variables ::= VARIABLES_KEYWORD LBRACE assignment* RBRACE {
    implements=["ch.kleis.lcaplugin.language.psi.type.PsiVariables"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.PsiVariablesMixin"
}

assignment ::= uid EQUAL quantity {
    implements=["ch.kleis.lcaplugin.language.psi.type.PsiAssignment"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.PsiAssignmentMixin"
}

/*
    Blocks
 */

block_products ::= PRODUCTS_KEYWORD LBRACE technoExchange* RBRACE {
    implements=["ch.kleis.lcaplugin.language.psi.type.block.PsiBlockProducts"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.block.PsiBlockProductsMixin"
}

block_inputs ::= INPUTS_KEYWORD LBRACE technoExchange* RBRACE {
    implements=["ch.kleis.lcaplugin.language.psi.type.block.PsiBlockInputs"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.block.PsiBlockInputsMixin"
}

block_emissions ::= EMISSIONS_KEYWORD LBRACE bioExchange* RBRACE {
    implements=["ch.kleis.lcaplugin.language.psi.type.block.PsiBlockEmissions"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.block.PsiBlockEmissionsMixin"
}

block_resources ::= RESOURCES_KEYWORD LBRACE bioExchange* RBRACE {
    implements=["ch.kleis.lcaplugin.language.psi.type.block.PsiBlockResources"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.block.PsiBlockResourcesMixin"
}

block_impacts ::= IMPACTS_KEYWORD LBRACE impactExchange* RBRACE {
    implements=["ch.kleis.lcaplugin.language.psi.type.block.PsiBlockImpacts"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.block.PsiBlockImpactsMixin"
}

/*
    Exchanges
 */

technoExchange ::= quantity productRef {
    implements=["ch.kleis.lcaplugin.language.psi.type.exchange.PsiTechnoExchange"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.exchange.PsiTechnoExchangeMixin"
}

bioExchange ::= quantity substanceRef {
    implements=["ch.kleis.lcaplugin.language.psi.type.exchange.PsiBioExchange"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.exchange.PsiBioExchangeMixin"
}

impactExchange ::= quantity indicatorRef {
    implements=["ch.kleis.lcaplugin.language.psi.type.exchange.PsiImpactExchange"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.exchange.PsiImpactExchangeMixin"
}

/*
    Quantity
 */

quantity ::= quantityTerm ((PLUS | MINUS) quantity)? {
    implements=["ch.kleis.lcaplugin.language.psi.type.quantity.PsiQuantity"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.quantity.PsiQuantityMixin"
}

quantityTerm ::= quantityFactor ((STAR | SLASH) quantityTerm)? {
    implements=["ch.kleis.lcaplugin.language.psi.type.quantity.PsiQuantityTerm"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.quantity.PsiQuantityTermMixin"
}

quantityFactor ::= quantityPrimitive (HAT NUMBER)? {
    implements=["ch.kleis.lcaplugin.language.psi.type.quantity.PsiQuantityFactor"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.quantity.PsiQuantityFactorMixin"
}

quantityPrimitive ::= NUMBER unit | LPAREN quantity RPAREN | quantityRef {
    implements=["ch.kleis.lcaplugin.language.psi.type.quantity.PsiQuantityPrimitive"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.quantity.PsiQuantityPrimitiveMixin"
}

/*
    Unit
 */

unit ::= unitFactor ((STAR | SLASH) unit)? {
    implements=["ch.kleis.lcaplugin.language.psi.type.unit.PsiUnit"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.unit.PsiUnitMixin"
}

unitFactor ::= unitPrimitive (HAT NUMBER)? {
    implements=["ch.kleis.lcaplugin.language.psi.type.unit.PsiUnitFactor"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.unit.PsiUnitFactorMixin"
}

unitPrimitive ::=
    unitLiteral
    | LPAREN unit RPAREN
    | unitRef {
    implements=["ch.kleis.lcaplugin.language.psi.type.unit.PsiUnitPrimitive"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.unit.PsiUnitPrimitiveMixin"
}

unitLiteral ::= UNIT_KEYWORD uid? LBRACE symbolField scaleField dimField RBRACE {
    implements=["ch.kleis.lcaplugin.language.psi.type.unit.PsiUnitLiteral"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.unit.PsiUnitLiteralMixin"
}

/*
    Reference
 */

productRef ::= urn {
    implements=["ch.kleis.lcaplugin.language.psi.type.ref.PsiProductRef"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.ref.PsiProductRefMixin"
}

quantityRef ::= urn {
    implements=["ch.kleis.lcaplugin.language.psi.type.ref.PsiQuantityRef"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.ref.PsiQuantityRefMixin"
}

substanceRef ::= urn {
    implements=["ch.kleis.lcaplugin.language.psi.type.ref.PsiSubstanceRef"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.ref.PsiSubstanceRefMixin"
}

indicatorRef ::= urn {
    implements=["ch.kleis.lcaplugin.language.psi.type.ref.PsiIndicatorRef"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.ref.PsiIndicatorRefMixin"
}

unitRef ::= urn {
    implements=["ch.kleis.lcaplugin.language.psi.type.ref.PsiUnitRef"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.ref.PsiUnitRefMixin"
}

/*
    Identifier
 */

urn ::= uid DOT urn | uid {
    implements=["ch.kleis.lcaplugin.language.psi.type.PsiUrn"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.PsiUrnMixin"
}

uid ::= IDENTIFIER {
    implements=["ch.kleis.lcaplugin.language.psi.type.PsiUID"]
    mixin="ch.kleis.lcaplugin.language.psi.mixin.PsiUIDMixin"
}

