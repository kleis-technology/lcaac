{
  parserClass="com.github.albanseurat.lcaplugin.language.parser.LcaParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Lca"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.albanseurat.lcaplugin.psi"
  psiImplPackage="com.github.albanseurat.lcaplugin.psi.impl"

  elementTypeHolderClass="com.github.albanseurat.lcaplugin.psi.LcaTypes"
  elementTypeClass="com.github.albanseurat.lcaplugin.psi.LcaElementType"
  tokenTypeClass="com.github.albanseurat.lcaplugin.psi.LcaTokenType"

  mixin("dataset_definition")="com.github.albanseurat.lcaplugin.language.psi.mixin.DatasetDefinitionMixin"
  implements("dataset_definition")="com.intellij.psi.PsiNameIdentifierOwner"

  mixin("input_exchange")="com.github.albanseurat.lcaplugin.language.psi.mixin.InputExchangeMixin"
  implements("input_exchange")="com.github.albanseurat.lcaplugin.language.psi.PsiExchangeElement"

  mixin("quantity")="com.github.albanseurat.lcaplugin.language.psi.mixin.QuantityMixin"
  implements("quantity")="com.github.albanseurat.lcaplugin.language.psi.PsiUnitElement"

  parserUtilClass="com.github.albanseurat.lcaplugin.language.parser.ExtensionParser"

  tokens=[
      TYPE_KEYWORD= 'type'
      COMPORTMENT_KEYWORD = 'compartment'
      SUB_COMPARTMENT_KEYWORD = 'subCompartment'
      UNIT_KEYWORD = 'unit'
      DATASET_KEYWORD= 'dataset'
      INPUTS_KEYWORD = 'inputs'
      PRODUCTS_KEYWORD = 'products'
      RESOURCES_KEYWORD = 'resources'
      EMISSIONS_KEYWORD = 'emissions'
      SUBSTANCE_KEYWORD = 'substances'
      LAND_USE_KEYWORD = 'land_use'
      META_KEYWORD = 'meta'
      IDENTIFIER = "regexp:\w+"
      UNIT = "regexp:\w+"
      NUMBER = "regexp:\d+"
      LBRACE = 'left-bracket'
      SEPARATOR = 'separator'
      RBRACE = 'right-bracker'
      LIST_ITEM = 'list'
      STRING = 'string'
      SPACE = "regexp:\s+"
  ]
}

lcaFile ::= (dataset_definition | substance)*

dataset_definition ::= DATASET_KEYWORD (IDENTIFIER | string_literal) LBRACE dataset_body RBRACE

substance ::= SUBSTANCE_KEYWORD (IDENTIFIER | string_literal) LBRACE substance_body RBRACE {
    implements = [ "com.github.albanseurat.lcaplugin.language.psi.Substance" ]
    elementTypeClass="com.github.albanseurat.lcaplugin.language.psi.stub.SubstanceStubElementType"
    mixin = "com.github.albanseurat.lcaplugin.language.psi.mixin.SubstanceMixin"
    stubClass = "com.github.albanseurat.lcaplugin.language.psi.stub.SubstanceStub"
}

dataset_body ::= (products | inputs | resources | emissions | land_use)* metadata?

substance_body ::= substance_type compartmentType subCompartmentType? unitType metadata?

inputs ::= INPUTS_KEYWORD LBRACE input_exchange* RBRACE {}

products ::= PRODUCTS_KEYWORD LBRACE product* RBRACE

resources ::= RESOURCES_KEYWORD LBRACE bio_exchange* RBRACE

emissions ::= EMISSIONS_KEYWORD LBRACE bio_exchange* RBRACE

land_use ::= LAND_USE_KEYWORD LBRACE bio_exchange* RBRACE

metadata ::= META_KEYWORD LBRACE property* RBRACE

meta input_exchange ::= exchange {
    mixin="com.github.albanseurat.lcaplugin.language.psi.mixin.InputExchangeMixin"
    implements="com.github.albanseurat.lcaplugin.language.psi.PsiExchangeElement"
}

meta product ::= exchange {
    implements = [ "com.github.albanseurat.lcaplugin.language.psi.Product" ]
    elementTypeClass="com.github.albanseurat.lcaplugin.language.psi.stub.ProductStubElementType"
    mixin = "com.github.albanseurat.lcaplugin.language.psi.mixin.ProductMixin"
    stubClass = "com.github.albanseurat.lcaplugin.language.psi.stub.ProductStub"
}

meta bio_exchange ::= exchange {
    mixin="com.github.albanseurat.lcaplugin.language.psi.mixin.BioExchangeMixin"
    implements="com.github.albanseurat.lcaplugin.language.psi.PsiExchangeElement"
}

substance_type ::= TYPE_KEYWORD SEPARATOR (RESOURCES_KEYWORD | EMISSIONS_KEYWORD | LAND_USE_KEYWORD)
compartmentType ::= COMPARTMENT_KEYWORD SEPARATOR string_literal
subCompartmentType ::= SUB_COMPARTMENT_KEYWORD SEPARATOR string_literal
unitType ::= UNIT_KEYWORD SEPARATOR <<parseQuantity>>

property ::= LIST_ITEM IDENTIFIER SEPARATOR string_literal {recoverWhile=next_exchange}

private exchange ::= LIST_ITEM (IDENTIFIER | string_literal) NUMBER <<parseQuantity>> {recoverWhile=next_exchange}

private next_exchange ::= !(LIST_ITEM | RBRACE)

private next_dataset ::= !DATASET_KEYWORD

private string_literal ::= STRING

quantity ::= UNIT

